#Purpose: Testing prediction of synthetic data (with no training/testing samples defined)
import numpy as np
from collections import OrderedDict
from format_sample_data import *
from sklearn import preprocessing, svm

synthetic_data = OrderedDict([
    ("GTCTGCTTCCCTTCTAACTGTGGTCATCAAGGCGTAATCA", 0),
    ("GCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACGCTAAC", 1),
])

gram_matrix = get_gram_matrix(synthetic_data)
print gram_matrix

labels = get_label_array(synthetic_data)
print "Labels:"
print labels

clf = svm.SVC(kernel='precomputed')
print clf.fit(gram_matrix, labels)
print "Prediction:"
print clf.predict(gram_matrix)

synthetic_data = OrderedDict([
    ("CTGTGCGAGTTATTGCGTGCTGGCGTGAGTCTAGAGCCCT", 0),
    ("ATACGAGATGATGATCCGCTGGCTCCTCATTTGTAAGAAC", 0),
    ("CAATCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGG", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATATGAT", 1),
])

gram_matrix = get_gram_matrix(synthetic_data)
print gram_matrix

print "Scaled:"
min_max_scaler = preprocessing.MinMaxScaler()
X_train_minmax = min_max_scaler.fit_transform(gram_matrix)
print X_train_minmax

labels = get_label_array(synthetic_data)
print "Labels:"
print labels

clf = svm.SVC(kernel='precomputed')
print clf.fit(gram_matrix, labels)
print "Prediction:"
print clf.predict(gram_matrix)

synthetic_data = OrderedDict([
    ("GTCTGCTTCCCTTCTAACTGTGGTCATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAACAGTGGTAATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAACAGTGGACATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAACCGTGGTCATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTATCAGTGGTCATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAGCAGTGGTCATCAAGGCGTAATCA", 0),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC", 1),
])

gram_matrix = get_gram_matrix(synthetic_data)
print gram_matrix

labels = get_label_array(synthetic_data)
print "Labels:"
print labels

clf = svm.SVC(kernel='precomputed')
print clf.fit(gram_matrix, labels)
print "Prediction:"
print clf.predict(gram_matrix)

synthetic_data = OrderedDict([
    ("GTCTGCTTCCCTTCTAACTGTGGTCATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAACAGTGGACATCAAGGCGTAATCA", 0),
    ("GTCTGCTTCCCTTCTAACAGTGGTAATCAAGGCGTAATCA", 0),
    ("ATATTGACGGGTTTAGTCACATATACCGGGCACGCCGGTT", 0),
    ("GTCTGCTTCCCTTCTAGCAGTGGTCATCAAGGCGTAATCA", 0),
    ("AGCCGGTGCCTCGATCAAGTCGGAGGAAGTCTAGAGTTGC", 0),
    ("CGGCTTTGTATAGCCTAGGATTAGCACCGCAATCTAAAGC", 0),
    ("GTCTGGTGTGTACGCGCGAGCAGCACGTCTGGAAAGAATC", 0),
    ("GTCTGCTTCCCTTCTATCAGTGGTCATCAAGGCGTAATCA", 0),
    ("TTCATCCGTCAGGATGACAATGGGCCATGTGAACCCGTTG", 0),
    ("GTCTGCTTCCCTTCTAACCGTGGTCATCAAGGCGTAATCA", 0),
    ("CCGATGTTCGAGCTCATAGTTGAGAGATGGTCCTTACACT", 0),
    ("TGTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGC", 1),
    ("TATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATC", 1),
    ("GTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("TCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
])

gram_matrix = get_gram_matrix(synthetic_data)
print gram_matrix

labels = get_label_array(synthetic_data)
print "Labels:"
print labels

clf = svm.SVC(kernel='precomputed')
print clf.fit(gram_matrix, labels)
print "Prediction:"
print clf.predict(gram_matrix)

synthetic_data = OrderedDict([
    ("GTCTGCTTCCCTTCTAACTGTGGTCATCAAGGCGTAATCA", 0),
    ("TTTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC", 1),
    ("GTCTGCTTCCCTTCTAACCGTGGTCATCAAGGCGTAATCA", 0),
    ("TCCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATC", 1),
    ("GTAGTCTGGTAGTTCCAGAAGCCGCGCCCTTCTGTCACCG", 0),
    ("ATGCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("CATGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("TTGAGATCGCTTAAGCCCTGCCTATAAGTCGCGGTAATGC", 0),
    ("GTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("GGGCCCAGTAGTCCGCGACGATAAGTAGGTACGAGCCCTA", 0),
    ("ATATTGACGGGTTTAGTCACATATACCGGGCACGCCGGTT", 0),
    ("GATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACC", 1),
    ("AGCCGGTGCCTCGATCAAGTCGGAGGAAGTCTAGAGTTGC", 0),
    ("GGACGGTAGGCCATTAGGTAAACATAGGATTTAACCGCGT", 0),
    ("TAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("GAGGCCATGTAGTAATGTATTTATTAGGCGAAATCCGGCA", 0),
    ("CGCGATGCTAGCATCTCAAACAATCTGGAGTACACGTTAT", 0),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("CCGATGTTCGAGCTCATAGTTGAGAGATGGTCCTTACACT", 0),
    ("ATGCTTGGGATCATCCCCGTCTGTCTAAATTCATTCGCAG", 0),
    ("CAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("TGCGAATGGGGCTTGAGGGAGGTGGCGCGAAGCTCTCGGG", 0),
    ("GCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("ACGAATGTGGAAACGGGAGGACATTAAAACACGAAGGATG", 0),
    ("TGTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("TTCTCTCTGAGGCCGTTTACTAATATCCACTGTGTCACTC", 0),
    ("CCGAAATCCGGCCGTTCACTTCATCTTAAAAGCGCGTATG", 0),
    ("GATGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATC", 1),
    ("GTCTGCTTCCCTTCTATCAGTGGTCATCAAGGCGTAATCA", 0),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC", 1),
    ("TATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("CGGCTTTGTATAGCCTAGGATTAGCACCGCAATCTAAAGC", 0),
    ("GTCTGGTGTGTACGCGCGAGCAGCACGTCTGGAAAGAATC", 0),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGC", 1),
    ("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATTT", 1),
    ("GAGTACGAGTACAAAGTTTTATTGTACCGCCGGGCTCCCC", 0),
    ("TAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("GACGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATGC", 1),
    ("TTCATCCGTCAGGATGACAATGGGCCATGTGAACCCGTTG", 0),
    ("TGGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("GTCTGCTTCCCTTCTAACAGTGGTAATCAAGGCGTAATCA", 0),
    ("CTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", 1),
    ("GTCTGCTTCCCTTCTAACAGTGGACATCAAGGCGTAATCA", 0),
    ("TGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAT", 1),
    ("GTCTGCTTCCCTTCTAGCAGTGGTCATCAAGGCGTAATCA", 0),
])

gram_matrix = get_gram_matrix(synthetic_data)
print gram_matrix

labels = get_label_array(synthetic_data)
print "Labels:"
print labels

clf = svm.SVC(kernel='precomputed')
print clf.fit(gram_matrix, labels)
print "Score"
print clf.score(gram_matrix, labels)
print "Prediction:"
print clf.predict(gram_matrix)
